const fs = require("fs").promises;
const { parse } = require("csv-parse/sync");

function slugify(text) {
  if (!text) return "";
  return text
    .toString()
    .toLowerCase()
    .trim()
    .replace(/\s+/g, "-")
    .replace(/[^\u0E00-\u0E7Fa-zA-Z0-9\-]+/g, "")
    .replace(/\-\-+/g, "-")
    .replace(/^-+/, "")
    .replace(/-+$/, "");
}

async function buildData() {
  try {
    console.log("üîç Reading CSV file...");
    const input = await fs.readFile("data/source.csv", "utf8");

    console.log("üìä Parsing CSV data...");
    const rows = parse(input, {
      columns: true,
      skip_empty_lines: true,
      bom: true,
    });

    console.log(`üìù Processing ${rows.length} rows...`);
    const flat = rows
      .map((r) => ({
        category: r["‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà"]?.trim() || "",
        topic: r["‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠"]?.trim() || "",
        law: r["‡∏Å‡∏é‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥"]?.trim() || undefined,
        knowYourRights: r["‡∏£‡∏π‡πâ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á"]?.trim() || undefined,
        howToIdentify: r["‡∏ß‡∏¥‡∏ò‡∏µ‡∏™‡∏±‡∏á‡πÄ‡∏Å‡∏ï‡∏∏"]?.trim() || undefined,
        selfHelp: r["‡∏ß‡∏¥‡∏ò‡∏µ‡∏ä‡πà‡∏ß‡∏¢‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á"]?.trim() || undefined,
        remark: r["remark"]?.trim() || undefined,
        slug: slugify(r["‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠"] || ""),
      }))
      .filter((row) => row.topic);

    console.log("üóÇÔ∏è  Grouping data by topic...");
    const grouped = flat.reduce((acc, row) => {
      const key = row.topic;
      (acc[key] ??= []).push(row);
      return acc;
    }, {});

    console.log("üìÅ Creating output directory...");
    await fs.mkdir("public/data", { recursive: true });

    console.log("üíæ Writing JSON files...");
    await fs.writeFile(
      "public/data/data_flat.json",
      JSON.stringify(flat, null, 2),
      "utf8"
    );

    await fs.writeFile(
      "public/data/data_grouped.json",
      JSON.stringify(grouped, null, 2),
      "utf8"
    );

    console.log(`‚úÖ Successfully processed ${flat.length} rows`);
    console.log(`ÔøΩÔøΩ Topics: ${Object.keys(grouped).length}`);
    console.log(
      `üè∑Ô∏è  Categories: ${[...new Set(flat.map((r) => r.category))].length}`
    );
  } catch (error) {
    console.error("‚ùå Error processing data:", error);
    process.exit(1);
  }
}

buildData();
